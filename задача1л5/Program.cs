// Рекурсия
// рекурсия - описание объекта внутри самого объекта, то есть ситуация,
// когда объект является частью самого себя.
// 1. Внутри изображения уменьшенная копия (бесконечная).
// 2. Набор матрешек (небесконечная).

// Принцип самовоспроизмедения.
// Как ветки на дереве.

// Рекурсия в программировании.
// Рекурсия - процесс, в котором функция вызывает саму себя.
// Соответсвующая функция называется рекурсивной функцией.
// Такой вызов называется рекурсивным вызовом.

// void OpenMatryoshka(int size) //пример с ошибкой
// {
//     Console.WriteLine($"Opening Matryoshka of size {size}...");
//     OpenMatryoshka(size);
// }

// OpenMatryoshka(5);

// Более простая задача - задача с меньшим объемом вычислений, самая простая задача.
// Базовый случай - самый простой случай, самая маленькая вложенная матрешка.

// void OpenMatryoshka(int size) //бесконечный цикл открывания матрешек
// {
//     Console.WriteLine($"Opening Matryoshka of size {size}...");
//     OpenMatryoshka(size - 1);
// }

// OpenMatryoshka(5);

// Условие остановки рекурсии.
// Текущая задача стала тривиальной, самой простой (об этом скажет значание параметра). return
// Рекурсивный вызов не требуется.
// Условие размещается перед рекурсивным вызовом.

// void OpenMatryoshka(int size)
// {
//     Console.WriteLine($"Opening Matryoshka of size {size}...");
//     //Базовый случай: самая маленькая матрешка
//     if (size == 1)
//     {
//         System.Console.WriteLine("Reached the smallest matryoshka!");
//     }
//     OpenMatryoshka(size - 1);
// }

// void OpenMatryoshka(int size)
// {
//     if (size == 1)
//     {
//         return;
//     }
//     System.Console.WriteLine($"Opening Matryoshka of size {size}...");
//     OpenMatryoshka(size - 1);
// }
// Opening Matryoshka of size 5
// Opening Matryoshka of size 4
// Opening Matryoshka of size 3
// Opening Matryoshka of size 2
// Reached the smallest matryoshka!
// Вывод на консоль от первого к последнему.

// void OpenMatryoshka(int size)
// {
//     if (size == 1)
//     {
//         return;
//     }
//     OpenMatryoshka(size - 1);
//     System.Console.WriteLine($"Opening Matryoshka of size {size}...");
// }
// Reached the smallest matryoshka!
// Opening Matryoshka of size 2
// Opening Matryoshka of size 3
// Opening Matryoshka of size 4
// Opening Matryoshka of size 5
// Раскручивание рекурсии. Вывод на консоль от последнего к первому. Возврат к местам вызова функции.
// При возврате в памяти сохраняются место возврата, значение параметров при вызове.
// Эта область памяти называется стеком.

// Расположение рекурсивного вызова влияет на последовательность действий в алгоритме.
// Некоторые алгоритмы корректно работаю и с до и с после.
// Раскручивание рекурсии происходит как с до, так и с после.

// Применение рекурсии:
// 1. Обход структуры данных дерева. Хранение и сортировка данных.
// Рекурсия для компактной реализации обхода элементав.
// Итерративная версия обхода данных значительно больше по объему кода. 
// Потребует дополнительного использования структур данных.

// 2. Алгоритм быстрой сортировки. (Quick sort)
// 3. Обход каталогов файловой системы.

// Вычислить факториал от натурального числа N.
// Используем рекурсивный вызов
// (N -1)! - более простая задача.
// N! = N * (N - 1) * ... * 1
// (N - 1) * ... * 1 = (N - 1)!
// N! = N * (N - 1)!
// Условие остановки рекурсии
// 3! = 3 * 2!
// 2! = 2 * 1!
// 1! = 1 - базовый случай
// Задача 1.
// Вычислить факториал от натурального числа N.

int Fact(int n)
{
    if (n == 1 || n == 0)
    {

        //отладочный вывод на экран
        Console.WriteLine($"Stop: {n}");
        return 1;
    }
    Console.WriteLine(n);
    return n * Fact(n - 1); // нельзя ставить !, так как в C# это совсем другое значение
}

Console.Write(Fact(5));

// F11 шаг с заходом
// F10 шаг с обходом
// F5 продолжить (до следующей точки)

// Факториал не решают рекурсией. Это просто демонстрация рекурсии. 
// Факториал считают циклом for.

// Отладка - процесс поиска и исправления ошибок в программном коде.
// Отладку можно проводить путем:
// - вывод текущего состояния программы
// - использование отладчиков
// Вывод (отладочная печать)
// - на консоль
// - в файл

// Добавить в код отладочный вывод, который
// позволит увидеть "Раскручивание" рекурсии, то
// есть процесс возвратов к местам рекурсивного
// вызова функции на строке 120.

// Выполнение кода построчно (запуск в режиме отладки)


// Принципы разработки ПО:
// DRY(Dont Repeat Yourself)Избегай дублирования кода.
// KISS(Keep It Simple,Stupid)Сохрани код простым,не усложняй без необходимости.
// YAGNI(You Arent Gonha Need It)Откажись от избыточной функциональности.
// Блок перехода к следующему числу:
// num = num + 1;
// i = i + 1;